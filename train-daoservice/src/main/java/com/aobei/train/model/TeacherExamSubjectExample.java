package com.aobei.train.model;

import com.aobei.train.model.TeacherExamSubjectExample.Criteria;
import com.github.liyiorg.mbg.support.example.CInterface;
import com.github.liyiorg.mbg.support.example.CItem;
import com.github.liyiorg.mbg.support.example.ColumnListAble;
import com.github.liyiorg.mbg.support.example.MbgExample;
import com.github.liyiorg.mbg.support.example.MbgGeneratedCriteria;
import com.github.liyiorg.mbg.support.example.PaginationAble;
import com.github.liyiorg.mbg.util.CUtil;
import java.io.Serializable;
import java.sql.Types;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;

@SuppressWarnings("unused")
public class TeacherExamSubjectExample extends MbgExample<Criteria> implements PaginationAble, Serializable, ColumnListAble {
    
    private static final long serialVersionUID = 1L;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table teacher__exam_subject
     *
     * @mbg.generated Thu Feb 01 11:23:32 CST 2018
     */
    public TeacherExamSubjectExample() {
        databaseType = "MySQL";
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table teacher__exam_subject
     *
     * @mbg.generated Thu Feb 01 11:23:32 CST 2018
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table teacher__exam_subject
     *
     * @mbg.generated Thu Feb 01 11:23:32 CST 2018
     */
    public void includeColumns(C... cs) {
        CUtil.includeColumns(C.class, this, cs);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table teacher__exam_subject
     *
     * @mbg.generated Thu Feb 01 11:23:32 CST 2018
     */
    public void excludeColumns(C... cs) {
        CUtil.excludeColumns(C.class, this, cs);
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table teacher__exam_subject
     *
     * @mbg.generated Thu Feb 01 11:23:32 CST 2018
     */
    protected abstract static class GeneratedCriteria extends MbgGeneratedCriteria {

        public Criteria andTeacher_idIsNull() {
            addCriterion("teacher_id is null");
            return (Criteria) this;
        }

        public Criteria andTeacher_idIsNotNull() {
            addCriterion("teacher_id is not null");
            return (Criteria) this;
        }

        public Criteria andTeacher_idEqualTo(Long value) {
            addCriterion("teacher_id =", value, "teacher_id");
            return (Criteria) this;
        }

        public Criteria andTeacher_idNotEqualTo(Long value) {
            addCriterion("teacher_id <>", value, "teacher_id");
            return (Criteria) this;
        }

        public Criteria andTeacher_idGreaterThan(Long value) {
            addCriterion("teacher_id >", value, "teacher_id");
            return (Criteria) this;
        }

        public Criteria andTeacher_idGreaterThanOrEqualTo(Long value) {
            addCriterion("teacher_id >=", value, "teacher_id");
            return (Criteria) this;
        }

        public Criteria andTeacher_idLessThan(Long value) {
            addCriterion("teacher_id <", value, "teacher_id");
            return (Criteria) this;
        }

        public Criteria andTeacher_idLessThanOrEqualTo(Long value) {
            addCriterion("teacher_id <=", value, "teacher_id");
            return (Criteria) this;
        }

        public Criteria andTeacher_idIn(List<Long> values) {
            addCriterion("teacher_id in", values, "teacher_id");
            return (Criteria) this;
        }

        public Criteria andTeacher_idNotIn(List<Long> values) {
            addCriterion("teacher_id not in", values, "teacher_id");
            return (Criteria) this;
        }

        public Criteria andTeacher_idBetween(Long value1, Long value2) {
            addCriterion("teacher_id between", value1, value2, "teacher_id");
            return (Criteria) this;
        }

        public Criteria andTeacher_idNotBetween(Long value1, Long value2) {
            addCriterion("teacher_id not between", value1, value2, "teacher_id");
            return (Criteria) this;
        }

        public Criteria andExam_subject_idIsNull() {
            addCriterion("exam_subject_id is null");
            return (Criteria) this;
        }

        public Criteria andExam_subject_idIsNotNull() {
            addCriterion("exam_subject_id is not null");
            return (Criteria) this;
        }

        public Criteria andExam_subject_idEqualTo(Long value) {
            addCriterion("exam_subject_id =", value, "exam_subject_id");
            return (Criteria) this;
        }

        public Criteria andExam_subject_idNotEqualTo(Long value) {
            addCriterion("exam_subject_id <>", value, "exam_subject_id");
            return (Criteria) this;
        }

        public Criteria andExam_subject_idGreaterThan(Long value) {
            addCriterion("exam_subject_id >", value, "exam_subject_id");
            return (Criteria) this;
        }

        public Criteria andExam_subject_idGreaterThanOrEqualTo(Long value) {
            addCriterion("exam_subject_id >=", value, "exam_subject_id");
            return (Criteria) this;
        }

        public Criteria andExam_subject_idLessThan(Long value) {
            addCriterion("exam_subject_id <", value, "exam_subject_id");
            return (Criteria) this;
        }

        public Criteria andExam_subject_idLessThanOrEqualTo(Long value) {
            addCriterion("exam_subject_id <=", value, "exam_subject_id");
            return (Criteria) this;
        }

        public Criteria andExam_subject_idIn(List<Long> values) {
            addCriterion("exam_subject_id in", values, "exam_subject_id");
            return (Criteria) this;
        }

        public Criteria andExam_subject_idNotIn(List<Long> values) {
            addCriterion("exam_subject_id not in", values, "exam_subject_id");
            return (Criteria) this;
        }

        public Criteria andExam_subject_idBetween(Long value1, Long value2) {
            addCriterion("exam_subject_id between", value1, value2, "exam_subject_id");
            return (Criteria) this;
        }

        public Criteria andExam_subject_idNotBetween(Long value1, Long value2) {
            addCriterion("exam_subject_id not between", value1, value2, "exam_subject_id");
            return (Criteria) this;
        }

        public Criteria andNoneIsNull() {
            addCriterion("none is null");
            return (Criteria) this;
        }

        public Criteria andNoneIsNotNull() {
            addCriterion("none is not null");
            return (Criteria) this;
        }

        public Criteria andNoneEqualTo(Long value) {
            addCriterion("none =", value, "none");
            return (Criteria) this;
        }

        public Criteria andNoneNotEqualTo(Long value) {
            addCriterion("none <>", value, "none");
            return (Criteria) this;
        }

        public Criteria andNoneGreaterThan(Long value) {
            addCriterion("none >", value, "none");
            return (Criteria) this;
        }

        public Criteria andNoneGreaterThanOrEqualTo(Long value) {
            addCriterion("none >=", value, "none");
            return (Criteria) this;
        }

        public Criteria andNoneLessThan(Long value) {
            addCriterion("none <", value, "none");
            return (Criteria) this;
        }

        public Criteria andNoneLessThanOrEqualTo(Long value) {
            addCriterion("none <=", value, "none");
            return (Criteria) this;
        }

        public Criteria andNoneIn(List<Long> values) {
            addCriterion("none in", values, "none");
            return (Criteria) this;
        }

        public Criteria andNoneNotIn(List<Long> values) {
            addCriterion("none not in", values, "none");
            return (Criteria) this;
        }

        public Criteria andNoneBetween(Long value1, Long value2) {
            addCriterion("none between", value1, value2, "none");
            return (Criteria) this;
        }

        public Criteria andNoneNotBetween(Long value1, Long value2) {
            addCriterion("none not between", value1, value2, "none");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table teacher__exam_subject
     *
     * @mbg.generated do_not_delete_during_merge Thu Feb 01 11:23:32 CST 2018
     */
    public static class Criteria extends GeneratedCriteria implements Serializable {
        
        private static final long serialVersionUID = 1L;

        protected Criteria() {
            super();
        }
    }

    /**
     * This enum was generated by MyBatis Generator.
     * This enum corresponds to the database table teacher__exam_subject
     *
     * @mbg.generated Thu Feb 01 11:23:32 CST 2018
     */
    public enum C implements CInterface {
        //--------------------------------------------------
		//[TABLE]	老师支持的考试科目
		//--------------------------------------------------
		/** 老师id */				teacher_id(1,Types.BIGINT,false),
		/** 考试科目id */			exam_subject_id(1,Types.BIGINT,false),
		/** 无用字段 */				none(2,Types.BIGINT,false);

        private final CItem C_I_T_E_M;

        private C(int type, int jdbcType, boolean delimited) {
            C_I_T_E_M = new CItem(type, jdbcType, delimited, name(), null , "`", "`");
        }

        public int getType() {
            return C_I_T_E_M.getType();
        }

        public int getJdbcType() {
            return C_I_T_E_M.getJdbcType();
        }

        public boolean isDelimited() {
            return C_I_T_E_M.isDelimited();
        }

        public String delimitedName() {
            return C_I_T_E_M.delimitedName();
        }

        public String delimitedAliasName() {
            return C_I_T_E_M.delimitedAliasName();
        }
    }
}